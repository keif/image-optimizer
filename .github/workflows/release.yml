name: Release Binaries

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v0.1.0'

permissions:
  contents: write  # Required for creating releases

jobs:
  build-standalone:
    name: Build Standalone Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            arch: amd64
          - os: macos-latest
            platform: darwin
            arch: arm64
          - os: ubuntu-latest
            platform: linux
            arch: amd64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
          - os: windows-latest
            platform: windows
            arch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git describe

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: web/pnpm-lock.yaml

      - name: Install libvips (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev

      - name: Install libvips (macOS)
        if: runner.os == 'macOS'
        run: brew install vips

      - name: Install libvips (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install vips
          echo "PKG_CONFIG_PATH=C:\tools\vips-dev-8.15\lib\pkgconfig" >> $GITHUB_ENV
          echo "PATH=C:\tools\vips-dev-8.15\bin;$PATH" >> $GITHUB_ENV

      - name: Get version
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build standalone binary
        shell: bash
        run: |
          chmod +x scripts/build-standalone.sh
          ./scripts/build-standalone.sh ${{ steps.version.outputs.version }}

      - name: Rename binary
        shell: bash
        run: |
          cd dist
          if [ "${{ runner.os }}" = "Windows" ]; then
            mv image-optimizer-${{ matrix.platform }}-${{ matrix.arch }}.exe image-optimizer-standalone-${{ matrix.platform }}-${{ matrix.arch }}.exe || true
          else
            mv image-optimizer-${{ matrix.platform }}-${{ matrix.arch }} image-optimizer-standalone-${{ matrix.platform }}-${{ matrix.arch }} || true
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: standalone-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/image-optimizer-standalone-*
          if-no-files-found: warn

  build-cli:
    name: Build CLI Binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: darwin
            arch: amd64
          - platform: darwin
            arch: arm64
          - platform: linux
            arch: amd64
          - platform: linux
            arch: arm64
          - platform: windows
            arch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build CLI binary
        env:
          GOOS: ${{ matrix.platform }}
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p dist
          output_name="imgopt-${{ matrix.platform }}-${{ matrix.arch }}"
          if [ "${{ matrix.platform }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi

          CGO_ENABLED=0 go build \
            -ldflags "-X main.version=${{ steps.version.outputs.version }}" \
            -o "dist/${output_name}" \
            ./cli

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/imgopt-*

  build-api-server:
    name: Build API Server Binary
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            arch: amd64
          - os: macos-latest
            platform: darwin
            arch: arm64
          - os: ubuntu-latest
            platform: linux
            arch: amd64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
          - os: windows-latest
            platform: windows
            arch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install libvips (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libvips-dev

      - name: Install libvips (macOS)
        if: runner.os == 'macOS'
        run: brew install vips

      - name: Install libvips (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install vips
          echo "PKG_CONFIG_PATH=C:\tools\vips-dev-8.15\lib\pkgconfig" >> $GITHUB_ENV
          echo "PATH=C:\tools\vips-dev-8.15\bin;$PATH" >> $GITHUB_ENV

      - name: Get version
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build API server binary
        shell: bash
        env:
          GOOS: ${{ matrix.platform }}
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p dist
          output_name="image-optimizer-server-${{ matrix.platform }}-${{ matrix.arch }}"
          if [ "${{ matrix.platform }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi

          CGO_ENABLED=1 go build \
            -ldflags "-X main.version=${{ steps.version.outputs.version }}" \
            -o "dist/${output_name}" \
            ./api

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-server-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist/image-optimizer-server-*
          if-no-files-found: warn

  create-release:
    name: Create GitHub Release
    needs: [build-standalone, build-cli, build-api-server]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: ls -lah dist/

      - name: Create checksums
        run: |
          cd dist
          sha256sum * > SHA256SUMS.txt

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
