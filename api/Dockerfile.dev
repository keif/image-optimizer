# Development Dockerfile - optimized for fast builds with Tilt
# Uses aggressive layer caching and skips non-essential optimizations

FROM golang:1.24-alpine

# Install all dependencies in one layer (cached unless Dockerfile changes)
RUN apk add --no-cache \
    gcc \
    g++ \
    make \
    vips-dev \
    libheif-dev \
    wget \
    tar \
    vips \
    libheif \
    ca-certificates

WORKDIR /app

# Install oxipng in a separate cached layer
# This only re-runs if the Dockerfile changes
RUN OXIPNG_VERSION=9.1.5 && \
    ARCH=$(uname -m) && \
    if [ "$ARCH" = "x86_64" ]; then \
        OXIPNG_ARCH="x86_64-unknown-linux-musl"; \
    elif [ "$ARCH" = "aarch64" ]; then \
        OXIPNG_ARCH="aarch64-unknown-linux-musl"; \
    else \
        echo '#!/bin/sh' > /usr/local/bin/oxipng && \
        echo 'echo "oxipng not available"' >> /usr/local/bin/oxipng && \
        echo 'exit 1' >> /usr/local/bin/oxipng && \
        chmod +x /usr/local/bin/oxipng && \
        exit 0; \
    fi && \
    wget -q "https://github.com/shssoichiro/oxipng/releases/download/v${OXIPNG_VERSION}/oxipng-${OXIPNG_VERSION}-${OXIPNG_ARCH}.tar.gz" -O /tmp/oxipng.tar.gz && \
    tar -xzf /tmp/oxipng.tar.gz -C /tmp && \
    find /tmp -name oxipng -type f -executable -exec mv {} /usr/local/bin/oxipng \; && \
    chmod +x /usr/local/bin/oxipng && \
    rm -rf /tmp/oxipng* && \
    oxipng --version || true

# Copy go mod files first for better caching
# This layer only rebuilds if go.mod or go.sum change
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build initial binary
RUN CGO_ENABLED=1 GOOS=linux go build -o main .

# Create data directory
RUN mkdir -p /app/data

# Expose port
EXPOSE 8080

# Environment variables for development
ENV PORT=8080
ENV DB_PATH=/app/data/api_keys.db
ENV RATE_LIMIT_ENABLED=true
ENV RATE_LIMIT_MAX=100
ENV RATE_LIMIT_WINDOW=1m
ENV API_KEY_AUTH_ENABLED=false
ENV PUBLIC_OPTIMIZATION_ENABLED=true

# Run the application
CMD ["./main"]
